import argparse
import logging

from ..main import BaseOperation, get_proxies
from ..main import Namespace as BaseNamespace
from ..telemetry_client import TelemetryClient

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    username: str|None=None
    password: str|None=None
    search: str|None=None


class Operation(BaseOperation):
    """Выведет контакты работодателя по заданной строке поиска"""

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument(
            "--username",
            type=str,
            help="Имя пользователя для аутентификации"
        )
        parser.add_argument(
            "--password",
            type=str,
            help="Пароль для аутентификации"
        )
        parser.add_argument(
            "--search",
            type=str,
            default='',
            help="Строка поиска для контактов работодателя"
        )

    def run(self, args: Namespace) -> None:
        proxies = get_proxies(args)
        client = TelemetryClient(proxies=proxies)
        auth = (args.username, args.password) if args.username and args.password else None
        # Аутентификация пользователя
        results = client.get_telemetry('/contact/persons', {'search': args.search, 'per_page': 10}, auth=auth)
        logger.debug(results)
        self.print_contacts(results)

    def print_contacts(self, data: dict) -> None:
        """Главная функция для вывода контактов в древовидной структуре."""
        print("📋 Контакты:")
        contacts = data.get("contact_persons", [])
        for idx, contact in enumerate(contacts):
            is_last_contact = idx == len(contacts) - 1
            self._print_contact(contact, is_last_contact)
            if not is_last_contact:
                print(" │")
        print()

    def _print_contact(self, contact: dict, is_last: bool) -> None:
        """Вывод информации о конкретном контакте."""
        user_prefix = "└──" if is_last else "├──"
        print(f" {user_prefix} 🧑 {contact['name']}")
        print(f" │   ├── 📧 Email: {contact['email']}")
        
        employer = contact.get("employer", {})
        self._print_employer(employer)
        
        phones = contact.get("phone_numbers", [])
        telegrams = contact.get("telegram_usernames", [])
        
        self._print_section("📞 Телефоны", phones, "phone_number")
        self._print_section("📱 Telegram", telegrams, "username")

    def _print_employer(self, employer: dict) -> None:
        """Вывод информации о работодателе, если она есть."""
        if not employer:
            return
        print(f" │   ├── 🏢 Работодатель: {employer.get('name', 'н/д')}")
        print(f" │   ├── 🏠 Город: {employer.get('area', 'н/д')}")
        print(f" │   └── 🌐 Сайт: {employer.get('site_url', 'н/д')}")

    def _print_section(self, title: str, items: list, key: str, indent_level: int) -> None:
        """Вывод секции с вложенными элементами."""
        prefix = " │   " * (indent_level - 1) + "├──"
        print(f"{prefix} {title}:")
        items = items or ['(пусто)']
        for i, item in enumerate(items):
            is_last_item = i == len(items) - 1
            item_prefix = "└──" if is_last_item else "├──"
            full_prefix = " │   " * indent_level + item_prefix
            value = item.get(key, item) if key else item
            print(f"{full_prefix} {value}")
