# –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è –¥—Ä—É–≥–∏—Ö
import argparse
import logging
import random
from typing import TextIO

from ..api import ApiClient, BadGateaway, BadRequest
from ..contsants import INVALID_ISO8601_FORMAT
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..types import ApiListResponse, VacancyItem

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    resume_id: str | None
    message_list: TextIO


class Operation(BaseOperation):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""

    def add_parser_arguments(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument("--resume-id", help="–ò–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
        parser.add_argument(
            "--message-list",
            help="–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –í —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã —Ç–∏–ø–∞ %%(name)s",
            type=argparse.FileType(),
        )

    def run(self, args: Namespace) -> None:
        assert args.config["access_token"]
        if args.message_list:
            application_messages = list(filter(None, map(str.strip, args.message_list)))
        else:
            application_messages = [
                "–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(name)s",
                "–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %(name)s",
            ]
        api = ApiClient(
            access_token=args.config["access_token"],
        )
        if not (resume_id := args.resume_id):
            resumes: ApiListResponse = api.get("/resumes/mine")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
            # TODO: —Å–æ–∑–¥–∞—Ç—å 10 —Ä–µ–∑—é–º–µ –∏ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –ø–æ 2000 –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å—É—Ç–∫–∏
            resume_id = resumes["items"][0]["id"]
        self._apply_jobs(api, resume_id, application_messages)
        print("üìù –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")

    def _apply_jobs(
        self, api: ApiClient, resume_id: str, application_messages: list[str]
    ) -> None:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏
        # –ü—Ä–æ–±–ª–µ–º–∞ —Ç—É—Ç –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–∫–ª–∏–º–∫–∞–ª–∏—Å—å –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–∞—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–æ –û–ù–ò –¢–ê–ú –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢. –¢–∞–∫ –∂–µ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –µ–±—É—á–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–≤–µ—Ä—Ö—É.

        # –Ø –ø—Ä–æ–±–æ–≤–∞–ª —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ, –ù–û date_from –æ–±—Ä–∞—å–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞ –µ—Å–ª–∏ –≤ date_to –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ published_at, —Ç–æ –≤—Å–µ —Å–≤–∞–ª–∏—Ç—Å—è, –ü–û–¢–û–ú–£ –ß–¢–û –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –§–û–†–ú–ê–¢. –ü–ò–î–û–†–´ –í–´ –ö–†–ò–í–û–†–£–ö–ò–ï!

        # –¢–∞–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ù–ï –ú–û–°–ö–û–í–°–ö–û–ï –í–†–ï–ú–Ø, –∞ –∫–∞–∫–æ–µ-—Ç–æ —Å–≤–æ–µ –ø–∏–¥–æ—Ä—Å–∫–æ–µ
        # date_to = datetime.strftime(datetime.now(), INVALID_ISO8601_FORMAT)
        date_max = ""
        while True:
            vacancies: ApiListResponse = api.get(
                f"/resumes/{resume_id}/similar_vacancies",
                per_page=100,
                order_by="publication_time",
            )
            item: VacancyItem
            for item in vacancies["items"]:
                # –í —Ä–æ—Ç —è –µ–±–∞–ª –≤–∞—Å –∏ –≤–∞—à–∏ —Ç–µ—Å—Ç—ã, –ø–∏–¥–æ—Ä—ã
                if item["has_test"]:
                    continue
                # –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—á–∏—é
                params = {
                    "resume_id": resume_id,
                    "vacancy_id": item["id"],
                    "message": random.choice(application_messages) % item
                    if item["response_letter_required"]
                    else "",
                }
                try:
                    # res = api.post("/negotiations", params)
                    # assert res == {}
                    logger.debug(
                        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é #%s %s", item["id"], item["name"]
                    )
                except (BadGateaway, BadRequest) as ex:
                    logger.warning(ex)
                    if isinstance(ex, BadRequest) and ex.limit_exceeded:
                        return
            if vacancies["pages"] == 1:
                break
            # published = datetime.strptime(item["published_at"], INVALID_ISO8601_FORMAT)
            date_max = item["published_at"]
